[{"D:\\Weather_API\\React_Weather_API\\src\\index.js":"1","D:\\Weather_API\\React_Weather_API\\src\\App.js":"2","D:\\Weather_API\\React_Weather_API\\src\\reportWebVitals.js":"3","D:\\Weather_API\\React_Weather_API\\src\\Components\\NavBar\\NavBar.js":"4","D:\\Weather_API\\React_Weather_API\\src\\Components\\About\\About.js":"5","D:\\Weather_API\\React_Weather_API\\src\\Components\\Main\\Main.js":"6","D:\\Weather_API\\React_Weather_API\\src\\Redux\\store.js":"7","D:\\Weather_API\\React_Weather_API\\src\\Redux\\weather_reducer.js":"8","D:\\Weather_API\\React_Weather_API\\src\\api\\api.js":"9","D:\\Weather_API\\React_Weather_API\\src\\Components\\Spinner\\Spinner.js":"10","D:\\Weather_API\\React_Weather_API\\src\\Redux\\geolocation_reducer.js":"11","D:\\Weather_API\\React_Weather_API\\src\\Redux\\errorMess_reducer.js":"12","D:\\Weather_API\\React_Weather_API\\src\\Components\\GeolocationWeather\\GeolocationWeather.js":"13","D:\\Weather_API\\React_Weather_API\\src\\Components\\Home\\HomeContainer.js":"14","D:\\Weather_API\\React_Weather_API\\src\\Components\\SearchWeather\\SearchWeather.js":"15","D:\\Weather_API\\React_Weather_API\\src\\Components\\Day\\Day.js":"16","D:\\Weather_API\\React_Weather_API\\src\\Components\\Alert.js":"17","D:\\Weather_API\\React_Weather_API\\src\\Components\\Footer\\Footer.js":"18"},{"size":723,"mtime":1609956637496,"results":"19","hashOfConfig":"20"},{"size":353,"mtime":1610129566077,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":1151,"mtime":1610125525127,"results":"23","hashOfConfig":"20"},{"size":258,"mtime":1610132534980,"results":"24","hashOfConfig":"20"},{"size":884,"mtime":1610117344381,"results":"25","hashOfConfig":"20"},{"size":544,"mtime":1610019692451,"results":"26","hashOfConfig":"20"},{"size":4784,"mtime":1610110462700,"results":"27","hashOfConfig":"20"},{"size":581,"mtime":1610056026633,"results":"28","hashOfConfig":"20"},{"size":318,"mtime":1609962461086,"results":"29","hashOfConfig":"20"},{"size":1688,"mtime":1610110962256,"results":"30","hashOfConfig":"20"},{"size":1092,"mtime":1610037678533,"results":"31","hashOfConfig":"20"},{"size":1387,"mtime":1610140276858,"results":"32","hashOfConfig":"20"},{"size":3558,"mtime":1610132455677,"results":"33","hashOfConfig":"20"},{"size":1730,"mtime":1610134728126,"results":"34","hashOfConfig":"20"},{"size":885,"mtime":1610123908624,"results":"35","hashOfConfig":"20"},{"size":180,"mtime":1610132333308,"results":"36","hashOfConfig":"20"},{"size":128,"mtime":1610129513672,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1go6nsg",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"D:\\Weather_API\\React_Weather_API\\src\\index.js",[],["83","84"],"D:\\Weather_API\\React_Weather_API\\src\\App.js",[],"D:\\Weather_API\\React_Weather_API\\src\\reportWebVitals.js",[],"D:\\Weather_API\\React_Weather_API\\src\\Components\\NavBar\\NavBar.js",["85"],"import React from 'react';\r\nimport classes from './NavBar.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { CssBaseline, Slide, AppBar, Toolbar, useScrollTrigger } from '@material-ui/core';\r\n\r\nconst NavBar = (props) => {\r\n    const { window } = props;\r\n    const trigger = useScrollTrigger({ target: window ? window() : undefined });\r\n\r\n    return (\r\n      <>\r\n        <CssBaseline />\r\n            <Slide appear={false} direction=\"down\" in={!trigger}>\r\n              <AppBar>\r\n                  <Toolbar>\r\n                    <NavLink to=\"/Home\" activeClassName={classes.active} className={classes.navLink}>Home</NavLink>\r\n                    <NavLink to=\"/About\" activeClassName={classes.active} className={classes.navLink}>About</NavLink>\r\n                    <NavLink to=\"/\" className={`${classes.navLink} ${classes.logo}`}><img src={`http://openweathermap.org/img/wn/10d.png`}/></NavLink>\r\n                  </Toolbar>\r\n              </AppBar>\r\n            </Slide>\r\n        <Toolbar />\r\n      </>\r\n    )\r\n}\r\n\r\nNavBar.propTypes = {\r\n    window: PropTypes.func,\r\n};\r\n\r\nexport default NavBar;\r\n","D:\\Weather_API\\React_Weather_API\\src\\Components\\About\\About.js",[],"D:\\Weather_API\\React_Weather_API\\src\\Components\\Main\\Main.js",[],"D:\\Weather_API\\React_Weather_API\\src\\Redux\\store.js",["86"],"import React from 'react';\r\nimport weather_reducer from './weather_reducer';\r\nimport geolocation_reducer from './geolocation_reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport errorMess_reducer from './errorMess_reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    geolocation: geolocation_reducer,\r\n    weather: weather_reducer,\r\n    errorMess: errorMess_reducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nwindow.store = store;","D:\\Weather_API\\React_Weather_API\\src\\Redux\\weather_reducer.js",["87"],"import React from 'react';\r\nimport { weatherFetch } from '../api/api';\r\nimport { setIsLoading_ActionCreater, setErrorMess_ActionCreater, setErrorMessSearch_ActionCreater } from './errorMess_reducer';\r\n\r\nconst SET_WEATHER = 'SET_WEATHER';\r\nconst SET_WEATHER_SEARCH = 'SET_WEATHER_SEARCH';\r\nconst SET_WEATHER_CITY = 'SET_WEATHER_CITY';\r\nconst SET_WEATHER_COUNTRY = 'SET_WEATHER_COUNTRY';\r\n\r\nconst initialState = {\r\n    weather: {},\r\n    weatherSearch: [],\r\n    city: null,\r\n    country: null,\r\n};\r\n\r\nconst weather_reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_WEATHER:\r\n            return {\r\n                ...state, weather: action.payload\r\n            };\r\n        case SET_WEATHER_SEARCH:\r\n            return {\r\n                ...state, weatherSearch: action.payload\r\n            };\r\n        case SET_WEATHER_CITY:\r\n            return {\r\n                ...state, city: action.payload\r\n            };\r\n        case SET_WEATHER_COUNTRY:\r\n            return {\r\n                ...state, country: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default weather_reducer;\r\n\r\nexport const setWeather_ActionCreater = (payload) => ({type: SET_WEATHER, payload});\r\nexport const setWeatherSearch_ActionCreater = (payload) => ({type: SET_WEATHER_SEARCH, payload});\r\nexport const setWeatherSearchCity_ActionCreater = (payload) => ({type: SET_WEATHER_CITY, payload});\r\nexport const setWeatherSearchCountry_ActionCreater = (payload) => ({type: SET_WEATHER_COUNTRY, payload});\r\n\r\n\r\nexport const setWeatherThunk = (city) => async (dispatch) => {\r\n\r\n    const city2 = (city === 'Novyy Rozdil') ? 'Lviv' : city;\r\n    const cityURL = city2.replace(/\\s/g, '-'); \r\n\r\n    dispatch(setIsLoading_ActionCreater());\r\n\r\n    try {\r\n        const response = await weatherFetch.geolocation(cityURL);\r\n        \r\n        if (response.data.cod === 200) {\r\n           dispatch(setWeather_ActionCreater(response.data));\r\n           dispatch(setErrorMess_ActionCreater(null));\r\n        } else {\r\n           dispatch(setWeather_ActionCreater({}));\r\n           dispatch(setErrorMess_ActionCreater(response.data.message));\r\n        }\r\n        \r\n    } catch(error) {\r\n        dispatch(setWeather_ActionCreater({}));\r\n        dispatch(setErrorMess_ActionCreater(error.response.data.message));\r\n    }\r\n\r\n    dispatch(setIsLoading_ActionCreater());\r\n}\r\n\r\n\r\n// // search\r\n// export const setWeatherSearchThunk = (city) => async (dispatch) => {\r\n\r\n//     const cityURL = city.replace(/\\s/g, '-'); \r\n\r\n//     dispatch(setIsLoading_ActionCreater());\r\n\r\n//     try {\r\n//         const response = await weatherFetch.search(cityURL);\r\n//         debugger\r\n//         if (response.data.cod === '200') {\r\n//            dispatch(setWeatherSearch_ActionCreater(response.data));\r\n//            dispatch(setErrorMessSearch_ActionCreater(null));\r\n//         } else {\r\n//            dispatch(setWeatherSearch_ActionCreater({}));\r\n//            dispatch(setErrorMessSearch_ActionCreater(response.data.message));\r\n//         }\r\n        \r\n//     } catch(error) {\r\n//         dispatch(setWeatherSearch_ActionCreater({}));\r\n//         dispatch(setErrorMessSearch_ActionCreater(error.response.data.message));\r\n//     }\r\n\r\n//     dispatch(setIsLoading_ActionCreater());\r\n// }\r\n\r\n\r\n\r\n// search\r\nexport const setWeatherSearchThunk = (city) => async (dispatch) => {\r\n\r\n    const cityURL = city.replace(/\\s/g, '-'); \r\n\r\n    dispatch(setIsLoading_ActionCreater());\r\n\r\n    try {\r\n        const response = await weatherFetch.search(cityURL);\r\n        debugger\r\n        if (response.data.cod === '200') {\r\n\r\n            const list = response.data.list;\r\n            const startNewDay = list.findIndex(el => el.dt_txt.split(' ')[1] === '00:00:00');\r\n            console.log('startNewDay: '+startNewDay);\r\n            const arr = [];\r\n            if (startNewDay > 0) {\r\n                arr.push(list.splice(0, startNewDay))\r\n            }\r\n            while(list.length > 0) {\r\n              arr.push(list.splice(0, 8))\r\n            }\r\n            console.log(arr);\r\n\r\n\r\n           dispatch(setWeatherSearch_ActionCreater(arr));\r\n           dispatch(setWeatherSearchCity_ActionCreater(response.data.city.name));\r\n           dispatch(setWeatherSearchCountry_ActionCreater(response.data.city.country));\r\n           dispatch(setErrorMessSearch_ActionCreater(null));\r\n\r\n        } else {\r\n\r\n           dispatch(setWeatherSearch_ActionCreater([]));\r\n           dispatch(setErrorMessSearch_ActionCreater(response.data.message));\r\n\r\n        }\r\n        \r\n    } catch(error) {\r\n        dispatch(setWeatherSearch_ActionCreater([]));\r\n        dispatch(setErrorMessSearch_ActionCreater(error.response.data.message));\r\n    }\r\n\r\n    dispatch(setIsLoading_ActionCreater());\r\n}\r\n","D:\\Weather_API\\React_Weather_API\\src\\api\\api.js",["88"],"import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\n \r\nexport const geolocationFetch = () => {\r\n  return axios.get('http://ip-api.com/json/?fields=status,message,country,regionName,city,lat,lon')\r\n}\r\n\r\n\r\nexport const weatherFetch = {\r\n    geolocation(city) {\r\n      return axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`)\r\n    },\r\n    search(city) {\r\n      return axios.get(`http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${apiKey}`)\r\n    },\r\n}\r\n\r\n","D:\\Weather_API\\React_Weather_API\\src\\Components\\Spinner\\Spinner.js",[],"D:\\Weather_API\\React_Weather_API\\src\\Redux\\geolocation_reducer.js",["89"],"import React from 'react';\r\nimport { geolocationFetch } from '../api/api';\r\nimport { setIsLoading_ActionCreater, setErrorMess_ActionCreater } from './errorMess_reducer';\r\nimport { setWeatherThunk } from './weather_reducer';\r\n\r\nconst SET_CITY = 'SET_CITY';\r\nconst SET_COUNTRY = 'SET_COUNTRY';\r\n\r\nconst initialState = {\r\n    city: \"\",\r\n    country: \"\",\r\n};\r\n\r\nconst geolocation_reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_CITY:\r\n            return {\r\n                ...state, city: action.payload\r\n            };\r\n        case SET_COUNTRY:\r\n            return {\r\n                ...state, country: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default geolocation_reducer;\r\n\r\n\r\nexport const setCity_ActionCreater = (payload) => ({type: SET_CITY, payload});\r\nexport const setCountry_ActionCreater = (payload) => ({type: SET_COUNTRY, payload});\r\n\r\n\r\nexport const setGeolocationThunk = () => async (dispatch) => {\r\n\r\n    dispatch(setIsLoading_ActionCreater());\r\n\r\n    try {\r\n\r\n        const response = await geolocationFetch();\r\n\r\n        if (response.data.status === \"success\") {\r\n\r\n           dispatch(setWeatherThunk(response.data.city));\r\n           dispatch(setCity_ActionCreater(response.data.city));\r\n           dispatch(setCountry_ActionCreater(response.data.country));\r\n           dispatch(setErrorMess_ActionCreater(null));\r\n\r\n        } else {\r\n           dispatch(setErrorMess_ActionCreater(response.data.message));\r\n        }\r\n\r\n    } catch(error) {\r\n        dispatch(setErrorMess_ActionCreater(error.response.data.message));\r\n    }\r\n\r\n    dispatch(setIsLoading_ActionCreater());\r\n}","D:\\Weather_API\\React_Weather_API\\src\\Redux\\errorMess_reducer.js",["90"],"import React from 'react';\r\n\r\nconst SET_IS_LOADING = 'SET_IS_LOADING';\r\nconst SET_ERROR_MESS = 'SET_ERROR_MESS';\r\nconst SET_ERROR_MESS_SEARCH = 'SET_ERROR_MESS_SEARCH';\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    error: null,\r\n    errorSearch: null,\r\n};\r\n\r\nconst errorMess_reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_IS_LOADING:\r\n            return {\r\n                ...state, isLoading: !state.isLoading\r\n            };\r\n        case SET_ERROR_MESS:\r\n            return {\r\n                ...state, error: action.payload\r\n            };\r\n        case SET_ERROR_MESS_SEARCH:\r\n            return {\r\n                ...state, errorSearch: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default errorMess_reducer;\r\n\r\nexport const setIsLoading_ActionCreater = () => ({type: SET_IS_LOADING});\r\nexport const setErrorMess_ActionCreater = (payload) => ({type: SET_ERROR_MESS, payload});\r\nexport const setErrorMessSearch_ActionCreater = (payload) => ({type: SET_ERROR_MESS_SEARCH, payload});\r\n","D:\\Weather_API\\React_Weather_API\\src\\Components\\GeolocationWeather\\GeolocationWeather.js",["91"],"D:\\Weather_API\\React_Weather_API\\src\\Components\\Home\\HomeContainer.js",["92","93"],"import React, {useState, useEffect, useMemo} from 'react'\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport { setGeolocationThunk } from '../../Redux/geolocation_reducer';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport { GeolocationWeather } from '../GeolocationWeather/GeolocationWeather';\r\nimport { setWeatherSearchThunk } from './../../Redux/weather_reducer';\r\nimport { SearchWeather } from '../SearchWeather/SearchWeather';\r\nimport { Alert } from './../Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nexport default function HomeContainer() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [search, setSearch] = useState('');\r\n\r\n    const city = useSelector(state => state.geolocation.city);\r\n    const country = useSelector(state => state.geolocation.country);\r\n\r\n    const weather = useSelector(state => state.weather.weather);\r\n\r\n    const searchArr = useSelector(state => state.weather.weatherSearch);\r\n    const searchCity = useSelector(state => state.weather.city);\r\n    const searchCountry = useSelector(state => state.weather.country);\r\n\r\n    const isLoading = useSelector(state => state.errorMess.isLoading)\r\n    const error_mess = useSelector(state => state.errorMess.error);\r\n    const errorSearch = useSelector(state => state.errorMess.errorSearch);\r\n\r\n    \r\n    const dispatch = useDispatch();\r\n         \r\n    useEffect(() => {\r\n        if (city.length === 0) {\r\n            dispatch(setGeolocationThunk());\r\n        }\r\n    }, [])\r\n\r\n\r\n    // const handleClick2 = React.useMemo(() => dispatch(setWeatherThunk(geolocation.city), [asd]));\r\n\r\n    const handleChange = (e) => {\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault();\r\n        dispatch(setWeatherSearchThunk(search));\r\n    }\r\n\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'];\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'Nocvember', 'December'];\r\n    const date = new Date();\r\n    const dates = `${days[date.getDay()]}, ${date.getDate()} ${months[date.getMonth()]}`;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n          \r\n            {isLoading ? <Spinner /> : (<>\r\n\r\n                {error_mess && (<Alert severity=\"error\">{error_mess}</Alert> )}\r\n                  \r\n                {city.length !== 0 && <GeolocationWeather city={city}\r\n                    country={country}\r\n                    weather={weather}\r\n                    dates={dates}        \r\n                />}\r\n\r\n                <hr></hr>\r\n                \r\n                <input onChange={handleChange} value={search} placeholder='Львів, Lviv, Kyiv, Ivano Frankivsk...' title='You can specify the City name not only in English. In list of more than 200,000 locations.'/>\r\n                <button onClick={handleClick}>Send</button>\r\n\r\n                {errorSearch && (<h3><Alert severity=\"error\">{errorSearch}</Alert></h3>)}\r\n\r\n                {searchArr.length !== 0  && <SearchWeather searchArr={searchArr} \r\n                    searchCity={searchCity}\r\n                    searchCountry={searchCountry}\r\n                    days={days}\r\n                    date={date}\r\n                />}\r\n\r\n            </>)}            \r\n        </div>\r\n    )\r\n}\r\n","D:\\Weather_API\\React_Weather_API\\src\\Components\\SearchWeather\\SearchWeather.js",["94"],"D:\\Weather_API\\React_Weather_API\\src\\Components\\Day\\Day.js",["95"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\n\r\nexport default function Day({searchArr, newDays}) {\r\n\r\n    const { id } = useParams();\r\n    const num =  newDays[0].indexOf(id)\r\n\r\n    return (\r\n        <div>\r\n            {searchArr[num].map((el2, index2) => (<div key={String(index2)}>\r\n                    <div>{el2.dt_txt}</div>\r\n                    <img src={`http://openweathermap.org/img/wn/${el2.weather[0].icon}@4x.png`}/>\r\n                    <div>{el2.main.temp}°C</div>\r\n                    <div>{el2.weather[0].description}</div>\r\n                    <div>Atmospheric pressure: {el2.main.pressure}hPa</div>\r\n                    <div>Humidity: {el2.main.humidity}%</div>\r\n                    <div>Wind speed: {el2.wind.speed}m/s</div>\r\n                    <div>Cloudiness: {el2.clouds.all}%</div>\r\n            </div>))}\r\n        </div>\r\n    )\r\n}\r\n","D:\\Weather_API\\React_Weather_API\\src\\Components\\Alert.js",[],"D:\\Weather_API\\React_Weather_API\\src\\Components\\Footer\\Footer.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":19,"column":86,"nodeType":"102","endLine":19,"endColumn":141},{"ruleId":"103","severity":1,"message":"104","line":1,"column":8,"nodeType":"105","messageId":"106","endLine":1,"endColumn":13},{"ruleId":"103","severity":1,"message":"104","line":1,"column":8,"nodeType":"105","messageId":"106","endLine":1,"endColumn":13},{"ruleId":"103","severity":1,"message":"104","line":1,"column":8,"nodeType":"105","messageId":"106","endLine":1,"endColumn":13},{"ruleId":"103","severity":1,"message":"104","line":1,"column":8,"nodeType":"105","messageId":"106","endLine":1,"endColumn":13},{"ruleId":"103","severity":1,"message":"104","line":1,"column":8,"nodeType":"105","messageId":"106","endLine":1,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":17,"column":25,"nodeType":"102","endLine":17,"endColumn":130},{"ruleId":"103","severity":1,"message":"107","line":1,"column":37,"nodeType":"105","messageId":"106","endLine":1,"endColumn":44},{"ruleId":"108","severity":1,"message":"109","line":48,"column":8,"nodeType":"110","endLine":48,"endColumn":10,"suggestions":"111"},{"ruleId":"100","severity":1,"message":"101","line":24,"column":21,"nodeType":"102","endLine":24,"endColumn":100},{"ruleId":"100","severity":1,"message":"101","line":13,"column":21,"nodeType":"102","endLine":13,"endColumn":98},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'city.length' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},"Update the dependencies array to be: [city.length, dispatch]",{"range":"117","text":"118"},[1658,1660],"[city.length, dispatch]"]