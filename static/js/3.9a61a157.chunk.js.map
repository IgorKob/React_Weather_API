{"version":3,"sources":["Components/SearchWeather/SearchWeather.module.css","Components/GeolocationWeather/GeolocationWeather.module.css","Components/Spinner/Spinner.js","Components/GeolocationWeather/GeolocationWeather.js","Components/Card/Card.js","Components/Day/Day.js","Components/SearchWeather/SearchWeather.js","Components/Alert.js","Components/SearchInput.js","Components/Home/HomeContainer.js"],"names":["module","exports","Spinner","className","GeolocationWeather","React","memo","city","country","weather","dates","classes","title","toUpperCase","JSON","stringify","wrapper","left","left_box","img","src","icon","alt","temp","Math","trunc","main","description","right","pressure","humidity","wind","speed","clouds","all","Card","dayTitle","padding","padding2","newDays","index","el","el2","dt_txt","Day","searchArr","id","useParams","num","indexOf","days","map","index2","dayWrapper","String","SearchWeather","searchCity","searchCountry","to","activeClassName","active2","navLink2","day","exact","path","useStyles","makeStyles","theme","root","width","marginTop","spacing","Alert","props","elevation","variant","AlertApp","mess","severity","CssTextField","withStyles","color","fontWeight","textShadow","fontSize","borderBottomColor","border","borderRadius","borderColor","TextField","display","flexWrap","justifyContent","margin","backgroundColor","SearchInput","onChange","onClick","value","noValidate","label","autoFocus","event","onKeyPress","key","preventDefault","HomeContainer","useState","search","setSearch","searchPrev","setSearchPrev","useSelector","state","geolocation","weatherSearch","isLoading","errorMess","isLoading2","error_mess","error","errorSearch","dispatch","useDispatch","useEffect","length","setGeolocationThunk","date","Date","getDay","getDate","getMonth","startDay","finishDay","push","slice","e","target","setWeatherSearchThunk","LinearProgress"],"mappings":"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","file":"static/js/3.9a61a157.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchWeather_wrapper__2hxdS\",\"title\":\"SearchWeather_title__xrtm_\",\"padding\":\"SearchWeather_padding__3UcKZ\",\"days\":\"SearchWeather_days__1Tw83\",\"navLink2\":\"SearchWeather_navLink2__z_1uw\",\"dayWrapper\":\"SearchWeather_dayWrapper__3AOu-\",\"padding2\":\"SearchWeather_padding2__2NSjJ\",\"dayTitle\":\"SearchWeather_dayTitle__2u9IB\",\"active2\":\"SearchWeather_active2__1T0NE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"GeolocationWeather_title__uEqoL\",\"wrapper\":\"GeolocationWeather_wrapper__wzFCP\",\"left\":\"GeolocationWeather_left__3XLwZ\",\"left_box\":\"GeolocationWeather_left_box__aV8XE\",\"img\":\"GeolocationWeather_img__33RHQ\",\"temp\":\"GeolocationWeather_temp__38xRu\",\"description\":\"GeolocationWeather_description__1xgkW\",\"right\":\"GeolocationWeather_right__Qsd_D\"};","import React from 'react'\r\nimport './Spinner.css'\r\n\r\nexport default function Spinner() {\r\n    return (\r\n        <div className=\"wrapp\"><div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>\r\n    )\r\n}","import React from 'react'\r\nimport classes from './GeolocationWeather.module.css';\r\nimport { PropTypes } from 'prop-types';\r\n \r\nexport const GeolocationWeather = React.memo(({ city, country, weather, dates }) => {\r\n    return (\r\n        <>\r\n            <div className={classes.title}>\r\n                <h1>{city}, {country.toUpperCase()}</h1>\r\n                <h2>{dates}</h2>\r\n            </div>\r\n            \r\n            {JSON.stringify(weather) !== '{}' && (<div className={classes.wrapper}>\r\n\r\n                <div className={classes.left}>\r\n                    <div className={classes.left_box}>\r\n                        <img className={classes.img} src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@4x.png`} alt='img'/>\r\n                        <div className={classes.temp}>{Math.trunc(weather.main.temp)}Â°C</div>\r\n                        <div className={classes.description}>{weather.weather[0].description}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={classes.right}>\r\n                    <div>Atmospheric pressure: <span>{weather.main.pressure}hPa</span></div>\r\n                    <div>Humidity: <span>{weather.main.humidity}%</span></div>\r\n                    <div>Wind speed: <span>{weather.wind.speed}m/s</span></div>\r\n                    <div>Cloudiness: <span>{weather.clouds.all}%</span></div>\r\n                </div>\r\n\r\n            </div>)}\r\n        </>\r\n    )\r\n});\r\n\r\nGeolocationWeather.propTypes = {\r\n    city: PropTypes.string,\r\n    country: PropTypes.string,\r\n    weather: PropTypes.object,\r\n    dates: PropTypes.string,\r\n};\r\n","import React from 'react'\r\nimport { PropTypes } from 'prop-types';\r\n\r\nexport default function Card({dayTitle=null, padding=null, padding2=null, newDays=null, index=null, el=null, el2=null}) {\r\n    return (\r\n        <>\r\n            <div className={dayTitle}>{newDays ? (`${newDays[0][index]}`) : (`${el2.dt_txt}`)}</div>\r\n            <div className={dayTitle}>{el ? (`${Math.trunc(el[0].main.temp)}`) : (`${Math.trunc(el2.main.temp)}`)}Â°C</div>\r\n            <img src={`https://openweathermap.org/img/wn/${el ? (el[0].weather[0].icon) : (el2.weather[0].icon)}@4x.png`} alt='img'/>\r\n            {el2 && <div className={padding}>{el2.weather[0].description}</div>}\r\n            {el2 && <div className={padding}>Atmospheric pressure: {el2.main.pressure}hPa</div>}\r\n            <div className={padding}>Humidity: {el ? (`${el[0].main.humidity}`) : (`${el2.main.humidity}`)}%</div>\r\n            <div className={padding}>Cloudiness: {el ? (`${el[0].clouds.all}`) : (`${el2.clouds.all}`)}%</div>\r\n            <div className={padding2}>Wind speed: {el ? (`${el[0].wind.speed}`) : (`${el2.wind.speed}`)}m/s</div>\r\n        </>\r\n    )\r\n}\r\n\r\nCard.propTypes = {\r\n    dayTitle: PropTypes.string,\r\n    padding: PropTypes.string,\r\n    padding2: PropTypes.string,\r\n    newDays: PropTypes.array,\r\n    index: PropTypes.number,\r\n    el: PropTypes.array,\r\n    el2: PropTypes.object,\r\n};\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport classes from './../SearchWeather/SearchWeather.module.css';\r\nimport Card from './../Card/Card';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nconst Day = React.memo(({searchArr, newDays }) => {\r\n\r\n    const { id } = useParams();\r\n    const num =  newDays[0].indexOf(id)\r\n\r\n    return (\r\n        <div className={classes.days}>\r\n            {searchArr[num].map((el2, index2) => (<div key={String(index2)} className={classes.dayWrapper}>\r\n                \r\n                <Card dayTitle={classes.dayTitle}\r\n                    el2={el2}\r\n                    padding={classes.padding}\r\n                    padding2={classes.padding2}\r\n                />\r\n\r\n            </div>))}\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Day;\r\n\r\nDay.propTypes = {\r\n    searchArr: PropTypes.array,\r\n    newDays: PropTypes.array,\r\n};\r\n","import React from 'react'\r\nimport classes from './SearchWeather.module.css' \r\nimport { NavLink, Route, Switch } from 'react-router-dom';\r\nimport Day from './../Day/Day';\r\nimport Card from './../Card/Card';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nexport const SearchWeather = React.memo(({ searchArr, searchCity, searchCountry, newDays }) => {\r\n    return (\r\n        <div className={classes.wrapper}>\r\n\r\n            <h2 className={classes.title}>{searchCity}, {searchCountry}</h2>\r\n            \r\n            <div className={classes.days}>\r\n                {searchArr.map((el, index) => (<NavLink key={String(index)} to={`/React_Weather_API/${newDays[0][index]}`} activeClassName={classes.active2} className={classes.navLink2}>\r\n                 \r\n                    <Card  dayTitle={classes.dayTitle}\r\n                        newDays={newDays}\r\n                        index={index}\r\n                        el={el}\r\n                        padding={classes.padding}\r\n                        padding2={classes.padding2}\r\n                    />\r\n                  \r\n                </NavLink>))}\r\n            </div>\r\n\r\n            <div className={classes.day}>\r\n                <Switch>\r\n                    <Route exact path={`/React_Weather_API/:id`}>\r\n                        <Day searchArr={searchArr} newDays={newDays}/>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n                \r\n        </div>\r\n    )\r\n});\r\n\r\nSearchWeather.propTypes = {\r\n    searchArr: PropTypes.array,\r\n    searchCity: PropTypes.string,\r\n    searchCountry: PropTypes.string,\r\n    newDays: PropTypes.array,\r\n};\r\n","import React from 'react';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n      },\r\n  },\r\n}));\r\n\r\nconst Alert = (props) => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport const AlertApp = ({mess}) => {\r\n  const classes = useStyles();\r\n  return <Alert severity=\"error\">Your {mess} in weather database</Alert>\r\n}\r\n\r\nAlertApp.propTypes = {\r\n  mess: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport {\r\n  withStyles,\r\n  makeStyles,\r\n} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: 'blue',\r\n      fontWeight: 'bold',\r\n      textShadow: '0 0 2px rgba(0, 0, 0, .3)',\r\n      fontSize: '22px',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: '#fff',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        border: '3px solid blue',\r\n        borderRadius: '5px',\r\n        color: 'blue',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: '#fff',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#fff',\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    width: '320px',\r\n    backgroundColor: 'rgba(255,255,255,.6)',\r\n  },\r\n}));\r\n\r\n\r\nconst SearchInput = React.memo(({ onChange, onClick, value }) => {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <form className={classes.root} noValidate>\r\n      <CssTextField\r\n        className={classes.margin}\r\n        label=\"Search weather...\"\r\n        variant=\"outlined\"\r\n        id=\"custom-css-outlined-input\"\r\n        autoFocus\r\n        onChange={(event) =>\r\n            onChange(event)\r\n        }\r\n        onKeyPress={(event) => {\r\n            if (event.key === \"Enter\") {\r\n                event.preventDefault();\r\n                onClick();\r\n            }\r\n        }}\r\n        value={value}\r\n      />\r\n    </form>\r\n  );\r\n});\r\n\r\nexport default SearchInput;\r\n\r\nSearchInput.propTypes = {\r\n  onChange: PropTypes.func,\r\n  onClick: PropTypes.func,\r\n  value: PropTypes.string,\r\n};","import React, {useState, useEffect} from 'react'\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport { setGeolocationThunk } from '../../Redux/geolocation_reducer';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport { GeolocationWeather } from '../GeolocationWeather/GeolocationWeather';\r\nimport { setWeatherSearchThunk } from './../../Redux/weather_reducer';\r\nimport { SearchWeather } from '../SearchWeather/SearchWeather';\r\nimport { AlertApp } from './../Alert';\r\nimport SearchInput from './../SearchInput';\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\n\r\nexport default function HomeContainer() {\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [searchPrev, setSearchPrev] = useState('');\r\n\r\n    const city = useSelector(state => state.geolocation.city);\r\n    const country = useSelector(state => state.geolocation.country);\r\n\r\n    const weather = useSelector(state => state.weather.weather);\r\n\r\n    const searchArr = useSelector(state => state.weather.weatherSearch);\r\n    const searchCity = useSelector(state => state.weather.city);\r\n    const searchCountry = useSelector(state => state.weather.country);\r\n\r\n    const isLoading = useSelector(state => state.errorMess.isLoading)\r\n    const isLoading2 = useSelector(state => state.errorMess.isLoading2)\r\n    const error_mess = useSelector(state => state.errorMess.error);\r\n    const errorSearch = useSelector(state => state.errorMess.errorSearch);\r\n\r\n    const dispatch = useDispatch();\r\n         \r\n    useEffect(() => {\r\n        if (city.length === 0) {\r\n            dispatch(setGeolocationThunk());\r\n        }\r\n    }, [])\r\n\r\n    const handleChange = (e) => {\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n    const handleClick = () => {\r\n        if (searchPrev !== search) {\r\n            setSearchPrev(search);\r\n            dispatch(setWeatherSearchThunk(search));\r\n        }\r\n    }\r\n\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'Nocvember', 'December'];\r\n    const date = new Date();\r\n    const dates = `${days[date.getDay()]}, ${date.getDate()} ${months[date.getMonth()]}`;\r\n\r\n    const startDay = date.getDay();\r\n    const finishDay = startDay + searchArr.length + 1;\r\n\r\n    const newDays = []\r\n    newDays.push(days.slice(startDay, finishDay))\r\n\r\n    return (\r\n        <div>\r\n          \r\n            {isLoading ? <Spinner /> : (<>\r\n                  \r\n                {city.length !== 0 && <GeolocationWeather city={city}\r\n                    country={country}\r\n                    weather={weather}\r\n                    dates={dates}        \r\n                />}\r\n\r\n                {error_mess && (<AlertApp mess={error_mess}/>)}\r\n\r\n                <hr></hr>\r\n                \r\n                <SearchInput onChange={handleChange} \r\n                    onClick={handleClick}\r\n                    value={search} \r\n                />\r\n\r\n                {isLoading2 && (<LinearProgress />)}\r\n\r\n                {errorSearch && (<AlertApp mess={errorSearch} />)}\r\n\r\n                {searchArr.length !== 0  && <SearchWeather searchArr={searchArr} \r\n                    searchCity={searchCity}\r\n                    searchCountry={searchCountry}\r\n                    newDays={newDays}\r\n                />}\r\n\r\n            </>)}            \r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}